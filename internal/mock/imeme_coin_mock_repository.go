// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/andys920605/meme-coin/internal/south/port/repository (interfaces: MemeCoinRepository)
//
// Generated by this command:
//
//	mockgen -destination=../../../mock/imeme_coin_mock_repository.go -package=mock github.com/andys920605/meme-coin/internal/south/port/repository MemeCoinRepository
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	meme_coin "github.com/andys920605/meme-coin/internal/domain/model/meme_coin"
	gomock "go.uber.org/mock/gomock"
)

// MockMemeCoinRepository is a mock of MemeCoinRepository interface.
type MockMemeCoinRepository struct {
	ctrl     *gomock.Controller
	recorder *MockMemeCoinRepositoryMockRecorder
	isgomock struct{}
}

// MockMemeCoinRepositoryMockRecorder is the mock recorder for MockMemeCoinRepository.
type MockMemeCoinRepositoryMockRecorder struct {
	mock *MockMemeCoinRepository
}

// NewMockMemeCoinRepository creates a new mock instance.
func NewMockMemeCoinRepository(ctrl *gomock.Controller) *MockMemeCoinRepository {
	mock := &MockMemeCoinRepository{ctrl: ctrl}
	mock.recorder = &MockMemeCoinRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMemeCoinRepository) EXPECT() *MockMemeCoinRepositoryMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockMemeCoinRepository) Delete(ctx context.Context, memeCoin *meme_coin.MemeCoin) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, memeCoin)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockMemeCoinRepositoryMockRecorder) Delete(ctx, memeCoin any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockMemeCoinRepository)(nil).Delete), ctx, memeCoin)
}

// GetByID mocks base method.
func (m *MockMemeCoinRepository) GetByID(ctx context.Context, id meme_coin.ID) (*meme_coin.MemeCoin, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(*meme_coin.MemeCoin)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockMemeCoinRepositoryMockRecorder) GetByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockMemeCoinRepository)(nil).GetByID), ctx, id)
}

// Save mocks base method.
func (m *MockMemeCoinRepository) Save(ctx context.Context, memeCoin *meme_coin.MemeCoin) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx, memeCoin)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockMemeCoinRepositoryMockRecorder) Save(ctx, memeCoin any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockMemeCoinRepository)(nil).Save), ctx, memeCoin)
}
